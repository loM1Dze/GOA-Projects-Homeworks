#print ("hello world")
#string --> str --> "აქ ვწერთ ნებისმიერ რამეს"
#integer --> int --> ნებისმიერი მთელი რიცხვი, მაგალითად: 2,4,6,10,55,34,21.
#float--> წილადი რიცხვები მაგალითად:2.4 2.90 5.1 4.30 6.1

#მათემატიკური ოპერატორები : + - * /

print(2 + 80)
print(50 - 40.43)
print(5 * 4)
print(20 / 5)

#სტრინგისა და ინტეჯერის ერთმანეთთან დამატება არ შეიძლება result --> error

print("Giga" + 20) # result --> error

#parantheses = ფრჩხილები = ( )
#quotation marks = ბრჭყალები = ""
#variables = ცვლადი (ყუთი, კონტეინერი)
#value = მნიშვნელობა 
#equal sign = ტოლობის ნიშანი
#underscore --> ( _ ) ანუ ქვედა ტირე

#სტრინგების დამატებას (შეერთებას) ეწოდება "კონკატინაცია"
print("dexter" + "rita")

#ცვლადების მიმატება

x = 40

y = 130

k = x + y # ცვლადებში შეგვიძლია ასევე შევინახოთ არა მხოლოდ ელემენტები, არამედ შევინახოთ რაიმე მოქმედების შედეგი

print(k)

#------------------------------------------------------------------------------------------------------------------

print(type(5))          # type -> integer / class →› ‘int’ 
print (type ("Giga"))   # type -› string / class -› ‘str’ 
print(type(3.14))       # type -> fLoat / class → ‘float’ 
print (type(True))      # type -›boolean / class -> ‘bool*

# --------------------------------------------------------------

  # str() - ფუნქცია რომელსაც გადაჰყავს მნიშვნელობები string ტიპის მონაცემად

print(type(str(5)))      # result: string 5

  # int() - ფუნქცია რომელსაც გადაჰყავს მონაცემი ინტეჯერში

print (type(int ("5")))  # result: integer 5

  # fLoat() - ფუნქცია რომელსაც გადაჰყავს მონაცემი ათწილადში

print (type(float(5)))   # result: float 5

#BooL() - ფუნქცია რომელსაც გადაჰყავს მნიშვნელობები booLean ტიპის მონაცემში. აქვს ისეთი ფუნქცია, რომ მისი
# გამოყენებისას შეუძლია გადააქციოს int ტიპის მონაცემი 0 --> False-ად და 1 --> True-დ.

print(bool(0))           # result: boolean False

print (bool(1))          # result: boolean True

#------------------------------------------------------------------------------------------------------

# შედარების ოპერაციები(ოპერატორები)
# >, <, == შედარების ოპერატორები
# მინიჭების ოპერატორი   = ; ანიჭებს მნიშვნელობას მაგ: ნუმ = 3, ცვლადს მივანიჭეთ მნიშვნელობა

print(10 > 5)               # True იმიტომ რომ 10 მართლაც მეტია 5 ზე
print(15 < 3)               # False რადგან 15 არ არის მეტი 3 ზე
print(14 == 15)             # False რადგან 14 არ არის 15 ის ტოლი
print("Giga" == "Niga")      # False რადგან "Giga" არ არის "Niga"


#-------------------------------------------------------------------------------------

# for loop (for მარყუჟი):
# ეს არის სპეციალური სტრუქტურა, რომელიც საშუალებას გვაძლევს 
# ერთნაირი კოდი გავუშვათ რამდენჯერმე, წინასწარ განსაზღვრული მნიშვნელობებისთვის.

# for loop-ის დახმარებით შეგვიძლია გავიმეოროთ მოქმედება სიის, დიაპაზონის ან სხვა კოლექციის ყველა ელემენტზე.

# მაგალითი:
# for i in range(5):
#     print(i)
# ამ შემთხვევაში, ცვლადი i მიიღებს მნიშვნელობებს 0-დან 4-მდე (ჯამში 5 ციფრი)
# და ყოველ ჯერზე დაიბეჭდება მისი მნიშვნელობა.

# for loop დაგვეხმარება როცა გვინდა:
# - ელემენტების ჩამოთვლა სიაში
# - მოქმედებების გამეორება გარკვეული რაოდენობით
# - მონაცემებზე წვდომა ერთის შემდეგ მეორეზე


#------------


# range() არის ფუნქცია, რომელიც ქმნის რიცხვების მიმდევრობას.
# მას შეიძლება გადაეცეს:
# 1 არგუმენტი – დასაწყისია 0, მთავრდება მოცემულ რიცხვამდე (არ ჩათვლით)
# 2 არგუმენტი – პირველი არის საწყისი, მეორე – ბოლო (ბოლო არ შედის)
# 3 არგუმენტი – მესამე ნიშნავს ნაბიჯს (რამდენით გაიზარდოს ყოველი მომდევნო რიცხვი)

# მაგალითად:
# range(5) → 0, 1, 2, 3, 4
# range(2, 6) → 2, 3, 4, 5
# range(1, 10, 2) → 1, 3, 5, 7, 9

# for loop მუშაობს ასე:
# for ცვლადი in range(...):
#     მოქმედება

# ანუ ყოველი რიცხვისთვის range()-ში, for loop ასრულებს მოქმედებას.
# მაგალითად:
# for i in range(3):
#     print(i)
# დაბეჭდავს:
# 0
# 1
# 2
